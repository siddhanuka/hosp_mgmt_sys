/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;
import model.Patient;
import model.PatientDirectory;

/**
 *
 * @author Administrator
 */
public class PatientJFrame extends javax.swing.JFrame {

    /**
     * Creates new form PatientJFrame
     */
    PatientDirectory patDir;
    int userId;
    
    public PatientJFrame(PatientDirectory patDir, int id) {
        initComponents();
//        Connect();
//        autoIncrementId();
//        populateTable();
        this.patDir = patDir;
        this.userId = id;
    }
    

//    public void autoIncrementId()
//    {
//        try {
//
//            Statement s = var.createStatement();
//            ResultSet rs = s.executeQuery("SELECT MAX(pat_id) FROM patient");
//            rs.next();
//            rs.getString("MAX(pat_id)");
//            if (rs.getString("MAX(pat_id)") == null) {
//                txtPatNo.setText("001");     
//            } else {
//                int id = Integer.parseInt(rs.getString("MAX(pat_id)"));     //.substring(2, rs.getString("MAX(pat_id)"))
//                id++;
//                txtPatNo.setText(String.format("%03d", id));
//            }
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }      
//    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)tblPat.getModel();
        model.setRowCount(0);
        
//        for (Patient pat : patDir.getPatDir()){
//            Object[] row = new Object[10];
//            row[0] = pat;
//            row[1] = pat.getId();
//            row[2] = pat.getAge();
//            row[3] = pat.getGender();
//            row[4] = pat.getPhone();
//            row[5] = pat.getEmail();
//            row[6] = pat.getBlood_group();
//            row[7] = pat.getProblem();
//
//            model.addRow(row);
//        }
//        if (model.getRowCount()==0){
//            JOptionPane.showMessageDialog(this, "No records retrieved.");
//        }        
    }
    
    public void resetFields(){
        txtName.setText("");
        txtAge.setText("");
        cmbSex.setSelectedItem(-1);
        txtProblem.setText("");
        txtEmail.setText("");
        txtPhone.setText("");
        txtBlood.setText("");
        txtId.setText("");
        btnAdd.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        lblSex = new javax.swing.JLabel();
        lblPhone = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblCommunity = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        cmbSex = new javax.swing.JComboBox<>();
        txtPhone = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtCommunity = new javax.swing.JTextField();
        lblZip = new javax.swing.JLabel();
        txtZip = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        lblCity = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        lblBlood = new javax.swing.JLabel();
        txtBlood = new javax.swing.JTextField();
        lblProblem = new javax.swing.JLabel();
        txtProblem = new javax.swing.JTextField();
        lblRegNo = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPat = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Patient Registration");

        lblName.setText("Name:");

        lblAge.setText("Age:");

        lblSex.setText("Sex:");

        lblPhone.setText("Phone:");

        lblEmail.setText("Email:");

        lblCommunity.setText("Community:");

        txtAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAgeActionPerformed(evt);
            }
        });

        cmbSex.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female" }));

        lblZip.setText("Zip Code:");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        lblCity.setText("City:");

        lblBlood.setText("Blood Group:");

        lblProblem.setText("Problem:");

        lblRegNo.setText("Patient Number:");

        txtId.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btnExit))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblCity)
                            .addComponent(lblEmail)
                            .addComponent(lblCommunity)
                            .addComponent(lblZip)
                            .addComponent(lblPhone)
                            .addComponent(lblSex)
                            .addComponent(lblAge)
                            .addComponent(lblName)
                            .addComponent(lblBlood)
                            .addComponent(lblProblem)
                            .addComponent(lblRegNo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbSex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProblem)
                            .addComponent(txtBlood)
                            .addComponent(txtZip)
                            .addComponent(txtCity)
                            .addComponent(txtCommunity)
                            .addComponent(txtEmail)
                            .addComponent(txtPhone)
                            .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                            .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtId, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE))))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRegNo)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAge)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSex)
                    .addComponent(cmbSex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhone)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCommunity))
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblZip))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBlood)
                    .addComponent(txtBlood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProblem)
                    .addComponent(txtProblem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnExit))
                .addGap(122, 122, 122))
        );

        tblPat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Patient No", "Age", "Sex", "Phone", "Email", "Blood Group", "Problem"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPat.getTableHeader().setReorderingAllowed(false);
        tblPat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPatMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPat);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAgeActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        int rowIndex = tblPat.getSelectedRow();
        
        if ((rowIndex < 0) ){
            JOptionPane.showMessageDialog(this, "Please select/view a row to update.");
            return;
        }
        
        String name = txtName.getText();
        if (name.isBlank()){
            JOptionPane.showMessageDialog(this, "Please enter the Name.");
            return;
        }
        
        long phone;
        try{
            phone = Long.parseLong(txtPhone.getText());
            if (txtPhone.getText().length() < 10) {
                JOptionPane.showMessageDialog(this, "Please enter a 10 digit number.");
                return;
            }
        }catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a number for Phone.");
            return;
        }
        
        int age;
        try{
            age = Integer.parseInt(txtAge.getText());
            if (age < 0) {
                JOptionPane.showMessageDialog(this, "Please enter a valid number for Age.");
                return;
            }    
        }catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number for Age.");
            return;
        }
        
        String sex = cmbSex.getSelectedItem().toString();
        if (sex.isBlank()){
            JOptionPane.showMessageDialog(this, "Please enter the Gender.");
            return;            
        }
        
        String email = txtEmail.getText();
        if (!isValidEmail(email)){
            JOptionPane.showMessageDialog(this, "Please enter a valid Email.");
            return;            
        }      
        
        int pat_id;
        try{
            pat_id = Integer.parseInt(txtId.getText());   
        }catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid Patient Number.");
            return;
        }  
        
        String bloodGrp = txtBlood.getText();
        String problem = txtProblem.getText();
        
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int rowIndex = tblPat.getSelectedRow();
        
        if ((rowIndex < 0) ){
            JOptionPane.showMessageDialog(this, "Please select/view a row to delete.");
            return;
        }        
        
        int pat_id = Integer.parseInt(txtId.getText());
        
        JOptionPane.showMessageDialog(this, "Record deleted successfully.");
        populateTable();
        resetFields();        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
                
        String name = txtName.getText();
        if (name.isBlank()){
            JOptionPane.showMessageDialog(this, "Please enter the Name.");
            return;
        }
        
        long phone;
        try{
            phone = Long.parseLong(txtPhone.getText());
            if (txtPhone.getText().length() < 10) {
                JOptionPane.showMessageDialog(this, "Please enter a 10 digit number.");
                return;
            }
        }catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a number for Phone.");
            return;
        }
        
        int age;
        try{
            age = Integer.parseInt(txtAge.getText());
            if (age < 0) {
                JOptionPane.showMessageDialog(this, "Please enter a valid number for Age.");
                return;
            }    
        }catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number for Age.");
            return;
        }
        
        String sex = cmbSex.getSelectedItem().toString();
        if (sex.isBlank()){
            JOptionPane.showMessageDialog(this, "Please enter the Gender.");
            return;            
        }
        
        String email = txtEmail.getText();
        if (!isValidEmail(email)){
            JOptionPane.showMessageDialog(this, "Please enter a valid Email.");
            return;            
        }      
        
        int pat_id;
        try{
            pat_id = Integer.parseInt(txtId.getText());   
        }catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid Patient Number.");
            return;
        } 
        
        String bloodGrp = txtBlood.getText();
        String problem = txtProblem.getText();
        
        Patient pat = new Patient(bloodGrp, problem, name, age, sex, email, phone, pat_id);
//        patDir.addPatient(pat);
        
        JOptionPane.showMessageDialog(this, "Record added successfully.");
        populateTable();
        resetFields();
    }//GEN-LAST:event_btnAddActionPerformed

    private void tblPatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPatMouseClicked
        //code to view the patient info pending
        int rowIndex = tblPat.getSelectedRow();
        
        DefaultTableModel model = (DefaultTableModel) tblPat.getModel();
        Patient pat = (Patient) model.getValueAt(rowIndex, 0);
        
        txtName.setText(pat.getName());
        txtAge.setText(String.valueOf(pat.getAge()));
        cmbSex.setSelectedItem(pat.getGender());
        txtProblem.setText(pat.getProblem());
        txtEmail.setText(pat.getEmail());
        txtPhone.setText(String.valueOf(pat.getPhone()));
        txtBlood.setText(pat.getBlood_group());
        txtId.setText(String.valueOf(pat.getId()));
        
        btnAdd.setEnabled(false);
    }//GEN-LAST:event_tblPatMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientJFrame(null, -1).setVisible(true);
            }
        });
    }
    
    private boolean isValidEmail(String email) {
        String regex = "^[\\w-_\\.+]*[\\w-_\\.]\\@([\\w]+\\.)+[\\w]+[\\w]$";
        return email.matches(regex);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbSex;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblBlood;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JLabel lblProblem;
    private javax.swing.JLabel lblRegNo;
    private javax.swing.JLabel lblSex;
    private javax.swing.JLabel lblZip;
    private javax.swing.JTable tblPat;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtBlood;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtCommunity;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtProblem;
    private javax.swing.JTextField txtZip;
    // End of variables declaration//GEN-END:variables
}
